import csv
from matplotlib import pyplot as plt
import numpy as np

query_results = {}
map_idx_to_column = {}

'''
Assumes the csv is generated by Hive. 
Can have any number of columns but must include 'ttls' and 'ts'
Assumes table name is prepended to column name
'''
def readHiveResultFile(filename):
    with open(filename) as csvfile:
        readCSV = csv.reader(csvfile, delimiter=',')
        for idx, row in enumerate(readCSV):

            # Get the column names and strip off the table name
            if idx == 0:
                for i, item in enumerate(row):
                    strippedName = item.split('.')[1]
                    query_results[strippedName] = []
                    map_idx_to_column[i] = strippedName
                continue

            # Store items in appropriate columns
            for i, item in enumerate(row):
                colName = map_idx_to_column[i]
                if colName == 'ts':
                    if idx == 1:
                        start_ts = float(item)
                    query_results[colName].append(float(item) - start_ts)
                elif colName == 'ttls':
                    query_results[colName].append(float(item))
                else:
                    query_results[colName].append(item)

'''
Assumes the csv looks like this:

response_time, ttl
6, 255
6, 201

'''
def readDigResults(filename):
    with open(filename) as csvfile:
        readCSV = csv.reader(csvfile, delimiter=',')
        for idx, row in enumerate(readCSV):

            # Get the column names and strip off the table name
            if idx == 0:
                for name in row:
                    map_idx_to_column[i] = name
                continue

            # Store items in appropriate columns
            for i, item in enumerate(row):
                colName = map_idx_to_column[i]
                if colName == 'ts':
                    query_results[colName].append(int(item))


def plotTTLs(start, end, filename):
    plt.plot(query_results['ts'][start:end], query_results['ttls'][start:end], linestyle="",marker="o", markersize=2.0)
    plt.grid(axis='x', linewidth=0.5, linestyle = 'dashed')
    #plt.xticks(np.arange(start, end, 300))
    plt.xticks(np.arange(int(query_results['ts'][start]), int(query_results['ts'][end]), 300))
    plt.xlabel('Timestamp (seconds since first timestamp)')
    plt.ylabel('TTL (seconds)')
    title = 'TTL lines for ' + str(int(query_results['ts'][start])) + ' seconds to ' + str(int(query_results['ts'][end])) + ' seconds'
    plt.title(title)
    figname = filename.split('.')[0] + '_' + str(start) + '_' + str(end) + '.png'
    plt.savefig(figname)
    plt.show()

filename = 'ttls_hive.csv'
readHiveResultFile(filename)
#print(query_results.keys())
#print(query_results['ts'][0:10])
plotTTLs(900, 1000, filename)